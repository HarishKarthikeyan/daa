#include<iostream>
#include<bits/stdc++.h>
#define INFINITY 1e9
#define MAX 10
using namespace std;
void dijkstra (int G[MAX][MAX], int n, int startnode);
int main ()
{
int G[MAX][MAX] = { 
{ 0, 4, 0, 0, 0, 0, 0, 8, 0 },
{ 4, 0, 8, 0, 0, 0, 0, 11, 0 },
{ 0, 8, 0, 7, 0, 4, 0, 0, 2 },
{ 0, 0, 7, 0, 9, 14, 0, 0, 0 },
{ 0, 0, 0, 9, 0, 10, 0, 0, 0 },
{ 0, 0, 4, 0, 10, 0, 2, 0, 0 },
{ 0, 0, 0, 14, 0, 2, 0, 1, 6 },
{ 8, 11, 0, 0, 0, 0, 1, 0, 7 },
{ 0, 0, 2, 0, 0, 0, 6, 7, 0 }
};
int i, j, n, u;
cout<<"Enter number of vertices:"<<endl;
cin>>n;
cout<<"Enter source node:"<<endl;
cin>>u;
dijkstra (G, n, u);
return 0;
}
void dijkstra (int G[MAX][MAX], int n, int startnode)
{
int cost[MAX][MAX], distance[MAX], pred[MAX];
int visited[MAX], count, mindistance, nextnode, i, j;
for (i = 0; i < n; i++)
for (j = 0; j < n; j++)
if (G[i][j] == 0)
cost[i][j] = INFINITY;
else
cost[i][j] = G[i][j];
for (i = 0; i < n; i++)
{
distance[i] = cost[startnode][i];
pred[i] = startnode;
visited[i] = 0;
}
distance[startnode] = 0;
visited[startnode] = 1;
count = 1;
while (count < n - 1)
{
mindistance = INFINITY;
for (i = 0; i < n; i++)
if (distance[i] < mindistance && !visited[i])
{
mindistance = distance[i];
nextnode = i;
}
visited[nextnode] = 1;
for (i = 0; i < n; i++)
if (!visited[i])
if (mindistance + cost[nextnode][i] < distance[i])
{
distance[i] = mindistance + cost[nextnode][i];
pred[i] = nextnode;
}
count++;
}
cout<<"Enter the destinaltion node"<<endl;
int dest;
cin>>dest;
if (dest != startnode){
cout<<"Distance of node "<<dest<<" from "<<"source node is "<<distance[dest]<<endl;
cout<<"Path = "<<dest;
j = dest;
do
{
j = pred[j];
cout<<"<-"<<j;
}while (j != startnode);
}
}